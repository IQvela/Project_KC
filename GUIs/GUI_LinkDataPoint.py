# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_AddDataPoint.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
from . import GUI_MessageBoxKC as msgbox
# import GUI_MessageBoxKC as msgbox

class Ui_MainWindow(QtWidgets.QMainWindow):
    
    def __init__(self,collect_data,ref_date):
        # self.MainWindow=QtWidgets.QMainWindow()
        super(Ui_MainWindow,self).__init__()
        self.collect_data=collect_data
        self.ref_date=ref_date
        
        self.linkdata_attrib=[]
        self.finish_window=False
    
    def closeEvent(self, event):
        self.finish_window=True
        self.close()

    def setupUi(self):
        self.resize(576, 541)
        self.centralwidget = QtWidgets.QWidget(self)
        
        # All labels (from up to down)------------------------------------------------------------- 
        self.Title_ReadData = QtWidgets.QLabel(self.centralwidget)
        self.Title_ReadData.setGeometry(QtCore.QRect(30, 30, 521, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.Title_ReadData.setFont(font)
        self.Title_ReadData.setAlignment(QtCore.Qt.AlignCenter)
        
        self.label_DataFrom = QtWidgets.QLabel(self.centralwidget)
        self.label_DataFrom.setGeometry(QtCore.QRect(60, 100, 120, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_DataFrom.setFont(font)

        self.label_date = QtWidgets.QLabel(self.centralwidget)
        self.label_date.setGeometry(QtCore.QRect(170, 150, 161, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_date.setFont(font)

        self.label_time = QtWidgets.QLabel(self.centralwidget)
        self.label_time.setGeometry(QtCore.QRect(360, 150, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_time.setFont(font)

        self.label_DateStart = QtWidgets.QLabel(self.centralwidget)
        self.label_DateStart.setGeometry(QtCore.QRect(60, 190, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_DateStart.setFont(font)
                
        self.label_DateEnd = QtWidgets.QLabel(self.centralwidget)
        self.label_DateEnd.setGeometry(QtCore.QRect(60, 240, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_DateEnd.setFont(font)

        self.label_delay = QtWidgets.QLabel(self.centralwidget)
        self.label_delay.setGeometry(QtCore.QRect(60, 300, 270, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_delay.setFont(font)
                
        
        #labels for explanation calcuation delay------------------------------------
        self.label_explain1 = QtWidgets.QLabel(self.centralwidget)
        self.label_explain1.setGeometry(QtCore.QRect(60, 350, 411, 60))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_explain1.setFont(font)
        

        # Text boxes -----------------------------------------------------
        
        #where data type come from (SCADA, GC....)
        self.text_DataFrom = QtWidgets.QTextEdit(self.centralwidget)
        self.text_DataFrom.setGeometry(QtCore.QRect(200, 90, 260, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_DataFrom.setFont(font)

        #start date and time
        self.text_DateStart = QtWidgets.QTextEdit(self.centralwidget)
        self.text_DateStart.setGeometry(QtCore.QRect(170, 180, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_DateStart.setFont(font)

        self.text_TimeStart = QtWidgets.QTextEdit(self.centralwidget)
        self.text_TimeStart.setGeometry(QtCore.QRect(360, 180, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_TimeStart.setFont(font) 

        #end date and time
        self.text_DateEnd = QtWidgets.QTextEdit(self.centralwidget)
        self.text_DateEnd.setGeometry(QtCore.QRect(170, 230, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_DateEnd.setFont(font)
        
        self.text_TimeEnd = QtWidgets.QTextEdit(self.centralwidget)
        self.text_TimeEnd.setGeometry(QtCore.QRect(360, 230, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_TimeEnd.setFont(font)

        #delay
        self.text_delay = QtWidgets.QTextEdit(self.centralwidget)
        self.text_delay.setGeometry(QtCore.QRect(350, 300, 120, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_delay.setFont(font)
        
   

        #Buttons---------------------------------------------------------------
        self.Button_OK = QtWidgets.QPushButton(self.centralwidget)
        self.Button_OK.setGeometry(QtCore.QRect(440, 450, 100, 40))
        self.Button_OK.clicked.connect(self.link_data)
        
        self.Button_Cancel = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Cancel.setGeometry(QtCore.QRect(300, 450, 100, 40))
        self.Button_Cancel.clicked.connect(self.cancel_button)
        
               
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 576, 26))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Link Data to Point"))

        #naming labels----------------------------------------------------------------------
        self.Title_ReadData.setText(_translate("MainWindow", "Link Data to Point"))
        self.label_DataFrom.setText(_translate("MainWindow", "Collect Data"))
        self.label_date.setText(_translate("MainWindow", "Date (YYYY-MM-DD)"))
        self.label_DateStart.setText(_translate("MainWindow", "Date start"))
        self.label_DateEnd.setText(_translate("MainWindow", "Date end"))
        self.label_time.setText(_translate("MainWindow", "Time (HH:MM:SS)"))
        self.label_delay.setText(_translate("MainWindow", "Time Delay resp. SCADA (HH:MM:SS)"))

        self.label_explain1.setText(_translate("MainWindow", "Delay of data selected with regards SCADA. For example,\nif GC computer time is 10:05 and KC computer time is 10:02,\nthe delay is of +3min"))
        # self.label_explain2.setText(_translate("MainWindow", "if GC computer time is 10:05 and KC computer time is 10:02,"))
        # self.label_explain3.setText(_translate("MainWindow", "the delay is of +3min"))

        #name buttons--------------------------------------------
        self.Button_OK.setText(_translate("MainWindow", "OK"))
        self.Button_Cancel.setText(_translate("MainWindow", "Cancel"))

        #text input--------------------------------------------------------------
        #type date (SCADA,GC...)
        self.text_DataFrom.setText(str(self.collect_data))
        self.text_DataFrom.setEnabled(False)


        if self.collect_data=="SCADA":
            delay="00:00:00"
        else:
            delay="00:03:00"
            
        self.default_attributes=[self.ref_date[0].split(" ")[0],self.ref_date[0].split(" ")[1],
                                 self.ref_date[1].split(" ")[0],self.ref_date[1].split(" ")[1],delay]
        
        self.text_boxes=[self.text_DateStart,self.text_TimeStart,self.text_DateEnd,self.text_TimeEnd,self.text_delay]
        
        for i,t_box in enumerate(self.text_boxes):
            # print(t_box)
            t_box.setPlaceholderText(self.default_attributes[i])
        # #date start
        # self.text_DateStart.setPlaceholderText(self.default_attributes[0].split(" ")[0])
        # self.text_TimeStart.setPlaceholderText(self.default_attributes[0].split(" ")[1])
        
        # #date end
        
        # self.text_DateEnd.setPlaceholderText(self.default_attributes[1].split(" ")[0])
        # self.text_TimeEnd.setPlaceholderText(self.default_attributes[1].split(" ")[1])
        
        # #delay        
        # self.text_delay.setPlaceholderText(self.default_attributes[-1])



    def link_data(self):
        for i,t_box in enumerate(self.text_boxes):
            if t_box.toPlainText()=="":
                t_box.setText(self.default_attributes[i])
        
        d_ini=self.text_DateStart.toPlainText()+" "+self.text_TimeStart.toPlainText()
        d_end=self.text_DateEnd.toPlainText()+" "+self.text_TimeEnd.toPlainText()   
        delay=self.text_delay.toPlainText()
        print(len(self.text_TimeStart.toPlainText().split(":")))
        if len(self.text_TimeStart.toPlainText().split(":"))==2:
            d_ini+=":00"
        if len(self.text_TimeEnd.toPlainText().split(":"))==2:
            d_end+=":00"
        try:
            d_ini=datetime.strptime(d_ini,"%Y-%m-%d %H:%M:%S")
            d_end=datetime.strptime(d_end,"%Y-%m-%d %H:%M:%S")   
            delay=datetime.strptime(delay,"%H:%M:%S")
            
            if d_ini>d_end or d_ini<datetime.strptime(self.ref_date[0],"%Y-%m-%d %H:%M:%S") or d_end>datetime.strptime(self.ref_date[1],"%Y-%m-%d %H:%M:%S")  :
                raise Exception("overtime","overtime")            
        except Exception as exc:
            if exc.args[0]=="overtime":
                if d_ini>d_end:
                    msgbox.Message_popup("Error","Error Date","Start date is later than End Date. Check that!")
                elif d_ini<datetime.strptime(self.ref_date[0],"%Y-%m-%d %H:%M:%S"):
                    msgbox.Message_popup("Error","Error Date","Start date is earlier than Point's Start Date. Check that!")
                elif d_end>datetime.strptime(self.ref_date[1],"%Y-%m-%d %H:%M:%S"):
                    msgbox.Message_popup("Error","Error Date","End date is later than Point's End Date. Check that!")
            else:
                msgbox.Message_popup("Error","Error Date","the date or the time or the delay has not the right format. Please check: Date: YYYY-MM-DD, time: HH:MM:SS")
        else:
            d_ini=d_ini.strftime("%Y-%m-%d %H:%M:%S")
            d_end=d_end.strftime("%Y-%m-%d %H:%M:%S")
            
            self.linkdata_attrib=[self.collect_data,d_ini,d_end,self.text_delay.toPlainText()]
            #print(self.linkdata_attrib)
            self.cancel_button()
            
    def cancel_button(self):
        self.finish_window=True
        self.close()
# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     ui = Ui_MainWindow("AUTOMATIC")
#     ui.setupUi()
#     ui.show()
#     sys.exit(app.exec_())

# ui = Ui_MainWindow("AUTOMATIC",["2019-02-01 11:55:00","2019-02-01 12:27:00"])
# ui.setupUi()
# ui.show()

# aa=datetime.strptime(ui.linkdata_attrib[1],"%Y-%m-%d %H:%M:%S")