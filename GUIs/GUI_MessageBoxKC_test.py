# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NewProject.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

class Message_popup:
    def __init__(self,m_type,m_title="",m_text=""):
        self.msg=QMessageBox()
        self.msg.setWindowTitle(m_title)
        self.msg.setText(m_text)
        self.ret="no great"
        if m_type=="Error":
            self.msgError()            
        elif m_type=="Warning":
            self.msgWarning()
        elif m_type=="Info":
            self.msgInfo()         
        elif m_type=="YesorNo":
            self.msgYesNo()
        
    def msgError(self):
        self.msg.setIcon(QMessageBox.Critical)
        return self.msg.exec_()
    def msgWarning(self):
        self.msg.setIcon(QMessageBox.Warning)
        return self.msg.exec_()
    def msgInfo(self): 
        self.msg.setIcon(QMessageBox.Information)
        return self.msg.exec_()       
    def msgYesNo(self): 
        # self.msg=self.msg.question(self,"test title","testing",QMessageBox.Yes | QMessageBox.No)
        self.msg.setIcon(QMessageBox.Question)
        self.msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        self.msg.buttonClicked.connect(self.popup_text)
        #self.msg.standardButton()
        return self.msg.exec_()
    
    def popup_text(self,i):
        if i.text()=="&Yes":
            self.ret="great"
        else:
            self.ret="no great"
        #return i.text()

# class Message_popup(object):

# 	def show_popup(self):
# 		msg = QMessageBox()
# 		msg.setWindowTitle("Tutorial on PyQt5")
# 		msg.setText("This is the main text!")
# 		msg.setIcon(QMessageBox.Question)
# 		msg.setStandardButtons(QMessageBox.Cancel|QMessageBox.Retry|QMessageBox.Ignore)
# 		msg.setDefaultButton(QMessageBox.Retry)
# 		msg.setInformativeText("informative text, ya!")

# 		msg.setDetailedText("details")

# 		msg.buttonClicked.connect(self.popup_button)

# 	def popup_button(self, i):
# 		print(i.text())
        
import GUI_MessageBoxKC as msgbox

# yesorno=msgbox.Message_popup("YesorNo","Time intervals overlapped","The time interval of the new data is overlapping with other databases loaded. keep it as separate?(Yes) or cancel (No)")
# a=yesorno.msg.buttonClicked.connect()
# a.text()
# print(a)
# print(yesorno.msg.buttonClicked)
# print(yesorno.msg.Yes)
yesorno=Message_popup("YesorNo","Time intervals overlapped","The time interval of the new data is overlapping with other databases loaded. keep it as separate?(Yes) or cancel (No)")
print(yesorno.ret)
# yesorno=Message_popup()
# yesorno.show_popup()

# if yesorno=="Yes":
#     print("great")
# elif yesorno=="No":
#     print("no great")
# if yesorno==msgbox.Message_popup.msg.Yes:#msgbox.QMessageBox.Yes:#yesorno.msg.Yes:#msgbox.Message_popup.msg.Yes:
#     print("yes")
# elif yesorno==yesorno.msg.No:
#     print("no")
    




