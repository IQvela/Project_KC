# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_ExperimentWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets

from . import GUI_MessageBoxKC as msgbox
from . import GUI_NewPoint as gui_newpoint
from . import GUI_OpenPoint as gui_openpoint
from . import GUI_AddSCADA as gui_addscada
from . import GUI_AddGC as gui_addgc
from . import GUI_AddSPA as gui_addspa
# import Classes_Backend as KCbckend


# import GUIs.GUI_MessageBoxKC as msgbox
# # import GUIs.GUI_NewPoint as gui_newpoint
# import GUIs.GUI_OpenPoint as gui_openpoint
# import GUIs.GUI_AddSCADA as gui_addscada
# import GUIs.GUI_AddGC as gui_addgc
# import Classes_Backend as KCbckend

class Ui_MainWindow(QtWidgets.QMainWindow):
    
    def __init__(self,Pr_list,exp_route):
        # self.MainWindow=QtWidgets.QMainWindow()
        super(Ui_MainWindow,self).__init__()

        self.Pr_list=Pr_list
        self.ind_pr_selected=exp_route[0] #index of the selected project
        self.ind_season_selected=exp_route[1] #index of the selected season       
        self.ind_exp_selected=exp_route[2] #index of the selected experiment
        self.project_selected=self.Pr_list[self.ind_pr_selected]
        self.exp_selected=self.Pr_list[self.ind_pr_selected].seasons[self.ind_season_selected].experiments[self.ind_exp_selected]
        
        self.col_labels_db=["Index","DB Type","Date Start","Date End","Delay","Comment"]        
        self.col_labels_points=["Index","Name","Date Start","Date End","DB added","Comment"]
        self.finish_window=False
    
    def closeEvent(self, event):
        self.project_selected.save_allprojects(self.Pr_list)
        self.finish_window=True
        self.close()
        
    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(1116, 620)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(206, 226, 244))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 98, 117))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(105, 131, 156))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(206, 226, 244))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(206, 226, 244))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 98, 117))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(105, 131, 156))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(206, 226, 244))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 98, 117))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(206, 226, 244))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 98, 117))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(105, 131, 156))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 98, 117))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 98, 117))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(157, 197, 234))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        
        
        #Labels------------------------------------------------------------------------------------------------
        self.Title_ExperimentName = QtWidgets.QLabel(self.centralwidget)
        self.Title_ExperimentName.setGeometry(QtCore.QRect(40, 25, 500, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        # font.setUnderline(False)
        font.setWeight(75)
        # font.setStrikeOut(False)
        self.Title_ExperimentName.setFont(font)
        # self.Title_ExperimentName.setAlignment(QtCore.Qt.AlignCenter)
        self.Title_ExperimentName.setObjectName("Title_ExperimentName")
        
        self.label_comments = QtWidgets.QLabel(self.centralwidget)
        self.label_comments.setGeometry(QtCore.QRect(50, 300, 221, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_comments.setFont(font)
        self.label_comments.setObjectName("label_comments")
 
        self.label_name = QtWidgets.QLabel(self.centralwidget)
        self.label_name.setGeometry(QtCore.QRect(50, 90, 90, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_name.setFont(font)
        self.label_name.setObjectName("label_fuel")        
 
        self.label_fuel = QtWidgets.QLabel(self.centralwidget)
        self.label_fuel.setGeometry(QtCore.QRect(50, 210, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_fuel.setFont(font)
        self.label_fuel.setObjectName("label_fuel")
        
        self.label_bed = QtWidgets.QLabel(self.centralwidget)
        self.label_bed.setGeometry(QtCore.QRect(50, 250, 70, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_bed.setFont(font)       
        
        self.label_DateStart = QtWidgets.QLabel(self.centralwidget)
        self.label_DateStart.setGeometry(QtCore.QRect(50, 135, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_DateStart.setFont(font)
        self.label_DateStart.setObjectName("label_DateStart")

        self.label_DateEnd = QtWidgets.QLabel(self.centralwidget)
        self.label_DateEnd.setGeometry(QtCore.QRect(50, 170, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_DateEnd.setFont(font)
        self.label_DateEnd.setObjectName("label_DateEnd")

        self.label_time = QtWidgets.QLabel(self.centralwidget)
        self.label_time.setGeometry(QtCore.QRect(350, 113, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_time.setFont(font)
        self.label_time.setObjectName("label_time")
        
        self.label_date = QtWidgets.QLabel(self.centralwidget)
        self.label_date.setGeometry(QtCore.QRect(160, 113, 161, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_date.setFont(font)
        self.label_date.setObjectName("label_date")

        self.label_pointsavailable = QtWidgets.QLabel(self.centralwidget)
        self.label_pointsavailable.setGeometry(QtCore.QRect(170, 400, 221, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_pointsavailable.setFont(font)
        self.label_pointsavailable.setObjectName("label_pointsavailable")   

        self.label_dataloaded = QtWidgets.QLabel(self.centralwidget)
        self.label_dataloaded.setGeometry(QtCore.QRect(580, 100, 191, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_dataloaded.setFont(font)
        self.label_dataloaded.setObjectName("label_dataloaded")
        
        self.label_Selectdatatype = QtWidgets.QLabel(self.centralwidget)
        self.label_Selectdatatype.setGeometry(QtCore.QRect(960, 30, 100, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_Selectdatatype.setFont(font)

        self.label_status = QtWidgets.QLabel(self.centralwidget)
        self.label_status.setGeometry(QtCore.QRect(580, 340, 250, 21))#580, 290, 100, 40
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_status.setFont(font)        


        #TextBoxes---------------------------------------------------------------------------------
        self.text_name = QtWidgets.QTextEdit(self.centralwidget)
        self.text_name.setGeometry(QtCore.QRect(160, 80, 301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_name.setFont(font)

        self.text_DateStart = QtWidgets.QTextEdit(self.centralwidget)
        self.text_DateStart.setGeometry(QtCore.QRect(160, 130, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_DateStart.setFont(font)
        self.text_DateStart.setObjectName("text_DateStart")

        self.text_TimeStart = QtWidgets.QTextEdit(self.centralwidget)
        self.text_TimeStart.setGeometry(QtCore.QRect(350, 130, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_TimeStart.setFont(font)
        self.text_TimeStart.setObjectName("text_TimeStart")
        
        self.text_DateEnd = QtWidgets.QTextEdit(self.centralwidget)
        self.text_DateEnd.setGeometry(QtCore.QRect(160, 170, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_DateEnd.setFont(font)
        self.text_DateEnd.setObjectName("text_DateEnd")
        
        self.text_TimeEnd = QtWidgets.QTextEdit(self.centralwidget)
        self.text_TimeEnd.setGeometry(QtCore.QRect(350, 170, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_TimeEnd.setFont(font)
        self.text_TimeEnd.setObjectName("text_TimeEnd")

        self.text_fuel = QtWidgets.QTextEdit(self.centralwidget)
        self.text_fuel.setGeometry(QtCore.QRect(160, 210, 301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_fuel.setFont(font)
        self.text_fuel.setObjectName("text_fuel")

        self.text_bed = QtWidgets.QTextEdit(self.centralwidget)
        self.text_bed.setGeometry(QtCore.QRect(160, 250, 301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_bed.setFont(font)

        self.text_comments = QtWidgets.QTextEdit(self.centralwidget)
        self.text_comments.setGeometry(QtCore.QRect(160, 290, 301, 70))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_comments.setFont(font)
        self.text_comments.setObjectName("text_comments")

        
        #Buttons----------------------------------------------------------------------------------
        self.Button_Modifyattrib = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Modifyattrib.setGeometry(QtCore.QRect(470, 80, 80, 50))#160, 80, 301, 31
        font = QtGui.QFont()
        font.setPointSize(9)
        self.Button_Modifyattrib.setFont(font) 
        self.Button_Modifyattrib.clicked.connect(self.modify_attrib)
        
        self.Button_AnalyseData = QtWidgets.QPushButton(self.centralwidget)
        self.Button_AnalyseData.setGeometry(QtCore.QRect(840, 290, 100, 40))
        
        self.Button_DeleteData = QtWidgets.QPushButton(self.centralwidget)
        self.Button_DeleteData.setGeometry(QtCore.QRect(710, 290, 100, 40))
        self.Button_DeleteData.clicked.connect(self.delete_data)
        
        self.Button_AddData = QtWidgets.QPushButton(self.centralwidget)
        self.Button_AddData.setGeometry(QtCore.QRect(820, 60, 100, 40))#960, 50, 100, 70
        self.Button_AddData.setObjectName("Button_AddData")
        self.Button_AddData.clicked.connect(self.add_data)
        
        self.Button_ViewData = QtWidgets.QPushButton(self.centralwidget)
        self.Button_ViewData.setGeometry(QtCore.QRect(580, 290, 100, 40))
        self.Button_ViewData.setObjectName("Button_ViewData")
        
        self.Button_Ok = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Ok.setGeometry(QtCore.QRect(960, 470, 100, 40))
        self.Button_Ok.setObjectName("Button_Ok")
        self.Button_Ok.clicked.connect(self.ok_button)
        
        self.Button_Cancel = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Cancel.setGeometry(QtCore.QRect(960, 520, 100, 40))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.Button_Cancel.clicked.connect(self.cancel_button)
        
        self.Button_AddPoint = QtWidgets.QPushButton(self.centralwidget)
        self.Button_AddPoint.setGeometry(QtCore.QRect(380, 390, 100, 40))
        self.Button_AddPoint.setObjectName("Button_AddPoint")
        self.Button_AddPoint.clicked.connect(self.new_point)
        
        self.Button_OpenPoint = QtWidgets.QPushButton(self.centralwidget)
        self.Button_OpenPoint.setGeometry(QtCore.QRect(50, 445, 100, 40))
        self.Button_OpenPoint.clicked.connect(self.open_point)

        self.Button_DeletePoint = QtWidgets.QPushButton(self.centralwidget)
        self.Button_DeletePoint.setGeometry(QtCore.QRect(50, 490, 100, 40))
        self.Button_DeletePoint.clicked.connect(self.delete_point)

        #TableWidgets--------------------------------------------------------------------------
        #table widget database (table where the loaded databases will be shown)
        self.tableWidget_db = QtWidgets.QTableWidget(self.centralwidget) 
        self.tableWidget_db.setGeometry(QtCore.QRect(580, 130, 480, 150))
        self.tableWidget_db.setColumnCount(len(self.col_labels_db))
        self.tableWidget_db.setRowCount(sum([len(self.exp_selected.data_experiment[k]) for k in self.exp_selected.data_experiment.keys()]))
        self.tableWidget_db.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        
        #Table points. Table where the points registered to the selected experiment will be displayed
        self.tableWidget_points = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_points.setGeometry(QtCore.QRect(170, 435, 750, 160))
        self.tableWidget_points.setColumnCount(len(self.col_labels_points))
        self.tableWidget_points.setRowCount(len(self.exp_selected.points))
        self.tableWidget_points.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        

        #List of the types of databases
        self.list_types = QtWidgets.QListWidget(self.centralwidget)
        self.list_types.setGeometry(QtCore.QRect(960, 50, 100, 70))
        self.list_types.setObjectName("list_types")
        for db in self.exp_selected.get_dbnames():
            item = QtWidgets.QListWidgetItem()
            self.list_types.addItem(item)
        

        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1116, 26))
        self.menubar.setObjectName("menubar")
        self.menu1 = QtWidgets.QMenu(self.menubar)
        self.menu1.setObjectName("menu1")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(self)
        self.actionOpen.setObjectName("actionOpen")
        self.menu1.addAction(self.actionOpen)
        self.menu1.addSeparator()
        self.menubar.addAction(self.menu1.menuAction())

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        
        
        s_name=self.Pr_list[self.ind_pr_selected].seasons[self.ind_season_selected].season_name
        e_name=self.exp_selected.exp_name   
        self.setWindowTitle(_translate("MainWindow", "OPEN EXPERIMENT >>>> SEASON: {}/ EXPERIMENT: {}".format(s_name,e_name)))
        self.Title_ExperimentName.setText(_translate("MainWindow", "SEASON: {}/ EXPERIMENT: {}".format(s_name,e_name)))
        self.label_comments.setText(_translate("MainWindow", "Comments"))
        self.label_name.setText(_translate("MainWindow", "Exp. Name"))
        self.label_fuel.setText(_translate("MainWindow", "Fuel"))
        self.label_bed.setText(_translate("MainWindow", "Bed Type"))
        self.label_DateStart.setText(_translate("MainWindow", "Date start"))
        self.label_DateEnd.setText(_translate("MainWindow", "Date end"))
        self.label_time.setText(_translate("MainWindow", "Time (HH:MM)"))
        self.label_date.setText(_translate("MainWindow", "Date (YYYY-MM-DD)"))
        self.label_dataloaded.setText(_translate("MainWindow", "Data Loaded"))
        self.label_pointsavailable.setText(_translate("MainWindow", "POINTS AVAILABLE"))
        self.label_Selectdatatype.setText(_translate("MainWindow", "Select Data:"))
        self.label_status.setText(_translate("MainWindow", "Status: Ready!"))

        self.Button_Modifyattrib.setText(_translate("MainWindow", "Modify Exp.\nAttributes"))
        self.Button_AnalyseData.setText(_translate("MainWindow", "ANALYZE DATA"))
        self.Button_DeleteData.setText(_translate("MainWindow", "DELETE DATA"))
        self.Button_AddData.setText(_translate("MainWindow", "ADD DATA"))
        self.Button_ViewData.setText(_translate("MainWindow", "VIEW DATA"))
        self.Button_Ok.setText(_translate("MainWindow", "OK"))
        self.Button_Cancel.setText(_translate("MainWindow", "CANCEL"))
        self.Button_AddPoint.setText(_translate("MainWindow", "ADD POINT"))
        self.Button_OpenPoint.setText(_translate("MainWindow", "OPEN POINT"))
        self.Button_DeletePoint.setText(_translate("MainWindow", "DELETE POINT"))
        
        self.populate_dbtable()
        self.populate_pointstable()
        

        self.tableWidget_db.setColumnWidth(0, 50)
        self.tableWidget_db.setColumnWidth(1, 70)
        self.tableWidget_db.setColumnWidth(2, 120)
        self.tableWidget_db.setColumnWidth(3, 120)
        self.tableWidget_db.setColumnWidth(4, 70)
        self.tableWidget_db.setColumnWidth(5, 200)

        self.tableWidget_points.setColumnWidth(0, 50)        
        self.tableWidget_points.setColumnWidth(1, 80)
        self.tableWidget_points.setColumnWidth(2, 120)
        self.tableWidget_points.setColumnWidth(3, 120)
        self.tableWidget_points.setColumnWidth(4, 120)
        self.tableWidget_points.setColumnWidth(5, 350)
        
        # __sortingEnabled = self.tableWidget.isSortingEnabled()
        # self.tableWidget.setSortingEnabled(False)
        # self.tableWidget.setSortingEnabled(__sortingEnabled)

        
        self.menu1.setTitle(_translate("MainWindow", "1"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))

        self.populate_attributes()

        #List Widget. Data bases types
        #db_types=["SCADA","GC1","INFERNO","SPA"]
        for db_i,db in enumerate(self.exp_selected.get_dbnames()):
            item=self.list_types.item(db_i)
            item.setText(db)
            

    def populate_attributes(self):        
        text_boxes=[(self.text_name,self.exp_selected.exp_name),
                    (self.text_DateStart,self.exp_selected.date_ini.split(" ")[0]),
                    (self.text_TimeStart,self.exp_selected.date_ini.split(" ")[1]),
                    (self.text_DateEnd,self.exp_selected.date_end.split(" ")[0]),
                    (self.text_TimeEnd,self.exp_selected.date_end.split(" ")[1]),
                    (self.text_fuel,self.exp_selected.fuel_type),
                    (self.text_bed,self.exp_selected.bed_type),
                    (self.text_comments,self.exp_selected.exp_comments)]

        for tbox in text_boxes:
            tbox[0].setText(tbox[1])
            tbox[0].setEnabled(False)#setReadOnly(True)#        


    #Method that populates the tablewidget_db with the info of the databases that have been loaded to this experiment
    def populate_dbtable(self):    
        self.tableWidget_db.clear()
        self.tableWidget_db.setRowCount(sum([len(self.exp_selected.data_experiment[k]) for k in self.exp_selected.data_experiment.keys()]))
        for i in range(self.tableWidget_db.columnCount()):
            item=QtWidgets.QTableWidgetItem()
            self.tableWidget_db.setHorizontalHeaderItem(i,item)
            if self.tableWidget_db.rowCount()>0:
                for j in range(self.tableWidget_db.rowCount()):
                    item=QtWidgets.QTableWidgetItem()
                    self.tableWidget_db.setVerticalHeaderItem(i,item)
                    item=QtWidgets.QTableWidgetItem()
                    self.tableWidget_db.setItem(j, i, item)



        for c_i,c_label in enumerate(self.col_labels_db):
            item = self.tableWidget_db.horizontalHeaderItem(c_i)
            item.setText(c_label)        

        r=0
        for k,db_tot in self.exp_selected.data_experiment.items():
            if len(db_tot)>0:
                for ind_db,db in enumerate(db_tot): #goes over the differente databases loaded for the data_type k in the data_experiment dictionary
                    tabledb_info=self.exp_selected.data_experiment_info[k][ind_db] #(datatype_entrynumber,d_min,d_max,comments,delay(HH:MM:SS))
                    #tabledb_info.insert(0,str(r)) #insert at index cero r
                    for c in range(self.tableWidget_db.columnCount()):
                        item=self.tableWidget_db.item(r,c)
                        if c==0:
                            item.setText(str(r))
                        else:    
                            item.setText(tabledb_info[c-1])
                    r+=1
        self.label_dataloaded.setText("Data Loaded: {}".format(self.tableWidget_db.rowCount()))    


    #Method that populates the tablewidget_points with the info of the points that have been registered to this experiment
    def populate_pointstable(self): 

        self.tableWidget_points.clear()
        self.tableWidget_points.setRowCount(len(self.exp_selected.points))

        for i in range(self.tableWidget_points.columnCount()):
            item=QtWidgets.QTableWidgetItem()
            self.tableWidget_points.setHorizontalHeaderItem(i,item)        
            if self.tableWidget_points.rowCount()>0:
                for j in range(self.tableWidget_points.rowCount()):
                    item=QtWidgets.QTableWidgetItem()
                    self.tableWidget_points.setVerticalHeaderItem(i,item)
                    item=QtWidgets.QTableWidgetItem()
                    self.tableWidget_points.setItem(j, i, item)   

        # self.col_labels_points=["Index","Name","Date Start","Date End","DB added","Comment"]

        for c_i,c_label in enumerate(self.col_labels_points):
            item = self.tableWidget_points.horizontalHeaderItem(c_i)
            item.setText(c_label)
        
        tablepoints_info=lambda j: [j, self.exp_selected.points[j].point_name,
                                    self.exp_selected.points[j].date_ini,self.exp_selected.points[j].date_end,
                                    [k for k,v in self.exp_selected.points[j].data_added.items() if len(v)>0],self.exp_selected.points[j].point_comments]
        for r in range(self.tableWidget_points.rowCount()):
            for c in range(self.tableWidget_points.columnCount()):
                item=self.tableWidget_points.item(r, c)
                item.setText(str(tablepoints_info(r)[c]))
        self.label_pointsavailable.setText("POINTS AVAILABLE: {}".format(self.tableWidget_points.rowCount()))


    #add new databases to the Experiment
    def add_data(self): #needs to be created a list to pick up the database type
        
        if len(self.list_types.selectedIndexes())==0 or len(self.list_types.selectedIndexes())>1:
            msgbox.Message_popup("Warning","No Data","Please select one data type from the list")
        else:
            self.label_status.setText("Status: Adding New Data...")
            data_type=self.list_types.selectedIndexes()[0].data()
            N_dbloaded_0=len(self.exp_selected.data_experiment_info[data_type]) #Number of databases of the data_type already loaded
            # print(N_dbloaded_0)
            if data_type=="SCADA":
                ui_addscada=gui_addscada.Ui_MainWindow(len(self.exp_selected.data_experiment[data_type]))
                ui_addscada.setupUi()
                ui_addscada.show()            
                while ui_addscada.finish_window==False:
                    QtCore.QCoreApplication.processEvents()
                    time.sleep(0.05)          
                
                if ui_addscada.datafile_info!="" and ui_addscada.text_filepath!="":
                    try:
                        self.exp_selected.add_data(data_type,ui_addscada.datafile_info[0],ui_addscada.datafile_info[1],ui_addscada.datafile_info[2])
                        N_dbloaded=len(self.exp_selected.data_experiment[data_type])
                        # print(N_dbloaded)
                        if N_dbloaded>N_dbloaded_0:
                            d_ini_file=datetime.strptime(self.exp_selected.data_experiment_info[data_type][N_dbloaded-1][1], "%Y-%m-%d %H:%M:%S")
                            d_end_file=datetime.strptime(self.exp_selected.data_experiment_info[data_type][N_dbloaded-1][2], "%Y-%m-%d %H:%M:%S")
                            d_ini_exp=datetime.strptime(self.exp_selected.date_ini, "%Y-%m-%d %H:%M:%S")            
                            d_end_exp=datetime.strptime(self.exp_selected.date_end, "%Y-%m-%d %H:%M:%S")
                            if max(d_ini_file,d_ini_exp)<min(d_end_file,d_end_exp): #checks if the timesets of the file and the experiment intersect
                                self.populate_dbtable()
                                msgbox.Message_popup("Info","Data Added", "Data succesfully added")
                            else:
                                del self.exp_selected.data_experiment[data_type][N_dbloaded-1] #deletes the last database added for the data_type evaluated (SCADA,GC1,etc..)
                                del self.exp_selected.data_experiment_info[data_type][N_dbloaded-1] #deletes the last database added for the data_type evaluated (SCADA,GC1,etc..)
                                msgbox.Message_popup("Error","Dates error", "The timeframe of the selected file does not interesect with the one of the experiment, please check the times and upload again the file")    
                    except:
                        msgbox.Message_popup("Error","Data Error", "An error ocurred while getting the data from the file. Please check the dates and/or the file and upload it again") 
            
            elif data_type=="GC1" or data_type=="INFERNO":
                ui_addgc=gui_addgc.Ui_MainWindow(len(self.exp_selected.data_experiment[data_type]))
                ui_addgc.setupUi()
                ui_addgc.show()            
                while ui_addgc.finish_window==False:
                    QtCore.QCoreApplication.processEvents()
                    time.sleep(0.05)          
                
                if ui_addgc.datafile_info!="" and ui_addgc.text_filepath!="":
                    try:
                        self.exp_selected.add_data(data_type,ui_addgc.datafile_info[0],ui_addgc.datafile_info[1],ui_addgc.datafile_info[2])
                        N_dbloaded=len(self.exp_selected.data_experiment[data_type])
                        if N_dbloaded>N_dbloaded_0:
                            d_ini_file=datetime.strptime(self.exp_selected.data_experiment_info[data_type][N_dbloaded-1][1], "%Y-%m-%d %H:%M:%S")
                            d_end_file=datetime.strptime(self.exp_selected.data_experiment_info[data_type][N_dbloaded-1][2], "%Y-%m-%d %H:%M:%S")
                            d_ini_exp=datetime.strptime(self.exp_selected.date_ini, "%Y-%m-%d %H:%M:%S")            
                            d_end_exp=datetime.strptime(self.exp_selected.date_end, "%Y-%m-%d %H:%M:%S")
                            if max(d_ini_file,d_ini_exp)<min(d_end_file,d_end_exp): #checks if the timesets of the file and the experiment intersect
                                self.populate_dbtable()
                                msgbox.Message_popup("Info","Data Added", "Data succesfully added")
                            else:
                                del self.exp_selected.data_experiment[data_type][N_dbloaded-1] #deletes the last database added for the data_type evaluated (SCADA,GC1,etc..)
                                del self.exp_selected.data_experiment_info[data_type][N_dbloaded-1] #deletes the last database added for the data_type evaluated (SCADA,GC1,etc..)
                                msgbox.Message_popup("Error","Dates error", "The timeframe of the selected file does not interesect with the one of the experiment, please check the times and upload again the file")    
                    except:
                        msgbox.Message_popup("Error","Data Error", "An error ocurred while getting the data from the file. Please check the dates and/or the file and upload it again") 
            
            elif data_type=="SPA":
                ui_addspa=gui_addspa.Ui_MainWindow(len(self.exp_selected.data_experiment[data_type]))
                ui_addspa.setupUi()
                ui_addspa.show()            
                while ui_addspa.finish_window==False:
                    QtCore.QCoreApplication.processEvents()
                    time.sleep(0.05)          
                
                if ui_addspa.datafile_info!="" and ui_addspa.text_filepath!="":
                    try:
                        self.exp_selected.add_data(data_type,ui_addspa.datafile_info[0],ui_addspa.datafile_info[1],ui_addspa.datafile_info[2])
                        N_dbloaded=len(self.exp_selected.data_experiment[data_type])
                        if N_dbloaded>N_dbloaded_0:
                            d_ini_file=datetime.strptime(self.exp_selected.data_experiment_info[data_type][N_dbloaded-1][1], "%Y-%m-%d %H:%M:%S")
                            d_end_file=datetime.strptime(self.exp_selected.data_experiment_info[data_type][N_dbloaded-1][2], "%Y-%m-%d %H:%M:%S")
                            d_ini_exp=datetime.strptime(self.exp_selected.date_ini, "%Y-%m-%d %H:%M:%S")            
                            d_end_exp=datetime.strptime(self.exp_selected.date_end, "%Y-%m-%d %H:%M:%S")
                            if max(d_ini_file,d_ini_exp)<min(d_end_file,d_end_exp): #checks if the timesets of the file and the experiment intersect
                                self.populate_dbtable()
                                msgbox.Message_popup("Info","Data Added", "Data succesfully added")
                            else:
                                del self.exp_selected.data_experiment[data_type][N_dbloaded-1] #deletes the last database added for the data_type evaluated (SCADA,GC1,etc..)
                                del self.exp_selected.data_experiment_info[data_type][N_dbloaded-1] #deletes the last database added for the data_type evaluated (SCADA,GC1,etc..)
                                msgbox.Message_popup("Error","Dates error", "The timeframe of the selected file does not intersect with the one of the experiment, please check the times and upload again the file")    
                    except:
                        msgbox.Message_popup("Error","Data Error", "An error ocurred while getting the data from the file. Please check the dates and/or the file and upload it again") 
            
            self.label_dataloaded.setText("Data Loaded: {}".format(self.tableWidget_db.rowCount()))
            self.label_status.setText("Status: Ready!")
            
            
    def new_point(self):
        default_attributes=""
        ui_newpoint=gui_newpoint.Ui_MainWindow(self.Pr_list,[self.ind_pr_selected,self.ind_season_selected,self.ind_exp_selected])
        ui_newpoint.setupUi()
        ui_newpoint.show()
        
        while ui_newpoint.finish_window==False:
            QtCore.QCoreApplication.processEvents()
            time.sleep(0.05)  

        self.populate_pointstable()

    def open_point(self):
        try:
            ind_point_selected=int(self.tableWidget_points.selectedIndexes()[0].data())
        except:
            msgbox.Message_popup("Error","Error","Please select an Experiment")
        else:        
            #self.tableWidget_points.selectedItems().
            # print(ind_point_selected)
            point_route=[self.ind_pr_selected,self.ind_season_selected,self.ind_exp_selected,ind_point_selected]
            ui_openpoint=gui_openpoint.Ui_MainWindow(self.Pr_list,point_route)
            ui_openpoint.setupUi()
            ui_openpoint.show()
            
            while ui_openpoint.finish_window==False:
                QtCore.QCoreApplication.processEvents()
                time.sleep(0.05)  
            self.populate_pointstable()

    def delete_point(self):
        print('delete point')
        try:
            ind_point_selected=int(self.tableWidget_points.selectedItems()[0].text())
            print(ind_point_selected)
        except:
            msgbox.Message_popup("Error","Error","Please select a Point")
        else:
            if ind_point_selected >-1:
                print(f"this is the selected: {ind_point_selected}")
                yesorno=msgbox.Message_popup("YesorNo","Delete Project", "Are you sure you want to delete the selected Project? Note: All data uploaded to this entry will be deleted (not the files)")
                if yesorno.response=="Yes":
                    print('this will delete point soon')
                    #del self.Pr_list[ind_pr_selected]
                    #self.populate_projecttable()

    def delete_data(self):
        print('delete data')
        try:
            ind_data_selected=int(self.tableWidget_db.selectedItems()[0].text())
            print(ind_data_selected)
        except:
            msgbox.Message_popup("Error","Error","Please select a Point")
        else:
            if ind_data_selected >-1:
                print(f"this is the selected: {ind_data_selected}")
                yesorno=msgbox.Message_popup("YesorNo","Delete Project", "Are you sure you want to delete the selected Project? Note: All data uploaded to this entry will be deleted (not the files)")
                if yesorno.response=="Yes":
                    print('this will delete data soon')
                    #del self.Pr_list[ind_pr_selected]
                    #self.populate_projecttable()

    def modify_attrib(self):
        self.label_status.setText("Status: Modifying Attributes...")
        if self.text_name.isEnabled()==True:
            
            d_ini=self.text_DateStart.toPlainText()+" "+self.text_TimeStart.toPlainText()
            d_end=self.text_DateEnd.toPlainText()+" "+self.text_TimeEnd.toPlainText()   
            if len(self.text_TimeStart.toPlainText().split(":"))==2:
                d_ini+=":00"
            if len(self.text_TimeEnd.toPlainText().split(":"))==2:
                d_end+=":00"
            try:
                d_ini=datetime.strptime(d_ini,"%Y-%m-%d %H:%M:%S")
                d_end=datetime.strptime(d_end,"%Y-%m-%d %H:%M:%S")
                if d_ini>d_end:
                    raise Exception("overtime","overtime")                    
            except Exception as exc:
                if exc.args[0]=="overtime":
                    msgbox.Message_popup("Error","Dates Error","The Date Start is later than Date End")
                else:
                    msgbox.Message_popup("Error","Dates Format Error","the date or time has not the right format. Please check: Date: YYYY-MM-DD, time:HH:MM:SS")
            else:
                
                if self.tableWidget_db.rowCount()>0: #if there is any data already loaded to the experiment check that the new dates intersects with the data loaded
                    d_ini_list=[datetime.strptime(d_info[1],"%Y-%m-%d %H:%M:%S") for d_type in self.exp_selected.get_dbnames() for d_info in self.exp_selected.data_experiment_info[d_type]]
                    d_end_list=[datetime.strptime(d_info[2],"%Y-%m-%d %H:%M:%S") for d_type in self.exp_selected.get_dbnames() for d_info in self.exp_selected.data_experiment_info[d_type]]
                    if max(min(d_ini_list),d_ini)<min(max(d_end_list),d_end):                                        
                        self.exp_selected.date_ini=d_ini.strftime("%Y-%m-%d %H:%M:%S")
                        self.exp_selected.date_end=d_end.strftime("%Y-%m-%d %H:%M:%S")
                    else:
                        msgbox.Message_popup("Error","New Dates Error","The new timeframe assigned does not intersect with one of the data loaded for this experiment. Please Check")
                        self.text_DateStart.setText(self.exp_selected.date_ini.split(" ")[0])
                        self.text_TimeStart.setText(self.exp_selected.date_ini.split(" ")[1])
                        self.text_DateEnd.setText(self.exp_selected.date_end.split(" ")[0])
                        self.text_TimeEnd.setText(self.exp_selected.date_end.split(" ")[1])
                else:
                    self.exp_selected.date_ini=d_ini.strftime("%Y-%m-%d %H:%M:%S")
                    self.exp_selected.date_end=d_end.strftime("%Y-%m-%d %H:%M:%S")
                    
                self.exp_selected.exp_name=self.text_name.toPlainText()
                self.exp_selected.fuel_type=self.text_fuel.toPlainText()
                self.exp_selected.bed_type=self.text_bed.toPlainText()
                self.exp_selected.exp_comments=self.text_comments.toPlainText()
            
                self.populate_attributes()
                msgbox.Message_popup("Info","Modify Attributes","Valid attributes have been succesfully updated")
                self.label_status.setText("Status: Ready!")
        else:
            text_boxes=[self.text_name,self.text_DateStart,self.text_TimeStart,self.text_DateEnd,self.text_TimeEnd,self.text_fuel,self.text_bed,self.text_comments]
            for t_box in text_boxes:
                t_box.setEnabled(True)                    


    def ok_button(self):        
        self.cancel_button()
        
        
    def cancel_button(self):
        # self.save_projects() #ask first
        self.project_selected.save_allprojects(self.Pr_list)
        self.finish_window=True
        self.close()
                     
# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     self.show()
#     sys.exit(app.exec_())


# ui=Ui_MainWindow()
# ui.setupUi(0)
# ui.show()